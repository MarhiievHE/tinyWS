'use strict';

const FINAL_FRAME = 0x80;
const RSV = 0x00;
const LEN_16_BIT = 126;
const LEN_64_BIT = 127;
const MAX_16_BIT = 65535;
const GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
const WS_KEY = 'dGhlIHNhbXBsZSBub25jZQ==';
const PING_TIMEOUT = 5000;
const EOL = '\r\n';
const UPGRADE = [
  'HTTP/1.1 101 Switching Protocols',
  'Upgrade: websocket',
  'Connection: Upgrade',
  'Sec-WebSocket-Accept: ',
].join(EOL);
const MAGIC = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
const MAX_BUFFER = 1024 * 1024 * 100;
const CLOSE_TIMEOUT = 1000;

const FIN_MASK = 0x80;
const RSV_MASK = 0x70;
const OPCODE_MASK = 0x0f;
const MASK_MASK = 0x80;
const PAYLOAD_LEN_MASK = 0x7f;
const CONTROL_FRAME_MASK = 0x08;

const CLOSE_REASONS = {
  NORMAL_CLOSURE: 1000,
  GOING_AWAY: 1001,
  PROTOCOL_ERROR: 1002,
  UNSUPPORTED_DATA: 1003,
  RESERVED: 1004,
  NO_CODE_RECEIVED: 1005,
  CONNECTION_CLOSED_ABNORMALLY: 1006,
  INVALID_PAYLOAD: 1007,
  POLICY_VIOLATED: 1008,
  MESSAGE_TOO_BIG: 1009,
  MANDATORY_EXTENSION: 1010, //client
  INTERNAL_SERVER_ERROR: 1011,
  TLS_HANDSHAKE: 1015,
};

const OPCODES = {
  CONTINUATION: 0x00,
  TEXT: 0x01,
  BINARY: 0x02,
  CLOSE: 0x08,
  PING: 0x09,
  PONG: 0x0a,
};
const DATA_OPCODES = new Set([
  OPCODES.CONTINUATION,
  OPCODES.TEXT,
  OPCODES.BINARY,
]);
const CONTROL_OPCODES = new Set([OPCODES.CLOSE, OPCODES.PING, OPCODES.PONG]);

const EMPTY_PING = Buffer.from([0x89, 0x00]);
const EMPTY_PONG = Buffer.from([0x8a, 0x00]);
const EMPTY_BUFFER = Buffer.alloc(0);

module.exports = {
  FIN_MASK,
  RSV_MASK,
  OPCODE_MASK,
  MASK_MASK,
  PAYLOAD_LEN_MASK,
  RSV,
  OPCODES,
  FINAL_FRAME,
  LEN_16_BIT,
  LEN_64_BIT,
  MAX_16_BIT,
  GUID,
  WS_KEY,
  PING_TIMEOUT,
  UPGRADE,
  MAGIC,
  EOL,
  MAX_BUFFER,
  CLOSE_TIMEOUT,
  CONTROL_FRAME_MASK,
  DATA_OPCODES,
  CONTROL_OPCODES,
  CLOSE_REASONS,
  EMPTY_PING,
  EMPTY_PONG,
  EMPTY_BUFFER,
};
